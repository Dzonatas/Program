<?xml version="1.0" ?>
<auto>
<A335-Xo_t-Build-iDNA-1>
namespace _accept {
public partial class A335 {
static A335() {}
#if EMBED
public static void Main( string[] args )
  {
  X.Y.MapZ() ;
</A335-Xo_t-Build-iDNA-1>
<A335-Xo_t-Build-iDNA-2>
  Current.Interval.NOP() ;
  }
#endif
}
struct iDNA
  {
</A335-Xo_t-Build-iDNA-2>
<A335-Xo_t-Build-iDNA-3>
  }
public abstract class Auto
{
public abstract string LHS { get; }
public abstract string[] RHS { get; }
}
public class _Auto : Auto
{
public override string LHS { get { return string.Empty ; } }
public override string[] RHS { get { return null ; } }
}
public static class Codex
{
public static Auto Switch( int code )
{
switch( code ) {
</A335-Xo_t-Build-iDNA-3>
<A335-Xo_t-Build-iDNA-4>
default: return new _Auto() ;
}
}
}
}
</A335-Xo_t-Build-iDNA-4>
<_xml_reader>
var s = System.IO.File.OpenText( "/tmp/&guid;.il.xml" ) ;
var t = s.ReadToEnd() ;
var e = t.GetEnumerator() ;
//string INSTANCE_entity ;
string n = string.Empty ;
string l = string.Empty ;
string p = string.Empty ;
bool process = false ;
while( e.MoveNext() )
	{
	&debug_nop;
	if( e.Current == '&lt;' )
		{
		if( process )
			{ iDNA.Text( l ) ; X.Y.Z( l ) ; }
		l = string.Empty ;
		e.MoveNext() ;
		if( e.Current == '_' )
			{
			process = true ;
			e.MoveNext() ;
			while( e.Current >= '0' && '9' >= e.Current )
				{
				n += e.Current ;
				e.MoveNext() ;
				}
	//		iDNA.Element( n ) ;
			iDNA.Element( _accept.Codex.Switch(int.Parse(n)).LHS ) ;
			}
		else
			process = false ;
		while( e.Current != '>' )
			e.MoveNext() ;
		n = string.Empty ;
		continue ;
		}
	if( e.Current == '&' )
		{
		if( process )
			{ iDNA.Text( l ) ; X.Y.Z( l ) ; }
		l = string.Empty ;
		e.MoveNext() ;
		if( e.Current == '_' )
			{
			process = true ;
			e.MoveNext() ;
			/*
			while( e.Current >= '0' && '9' >= e.Current )
				{
				n += e.Current ;
				e.MoveNext() ;
				}
			*/
			while( e.Current != '_' )
				e.MoveNext() ;
			e.MoveNext() ;
			while( e.Current >= '0' && '9' >= e.Current )
				{
				n += e.Current ;
				e.MoveNext() ;
				}
			iDNA.EntityReference( n ) ;
			}
		else
			process = false ;
		while( e.Current != ';' )
			e.MoveNext() ;
		n = string.Empty ;
		continue ;
		}
	if( process )
		{
		l += e.Current ;
		if( p != string.Empty )
			{
			for( int i = int.Parse(p) ; i > 1 ; --i )
				{
				e.MoveNext() ;
				l += e.Current ;
				}
			p = string.Empty ;
			}
		}
	}
s.Close() ;
</_xml_reader>
</auto>