<?xml version="1.0" ?>
<auto>
<A335-Xo_t-Build-0>
interface Item { }
namespace &branch; {
public partial class A335 {
static A335() {}
#if EMBED
public readonly static char[] MSB = new char[] { ' ', '.' } ;
#endif
}
}
</A335-Xo_t-Build-0>
<A335-Xo_t-Build-iDNA-5i>
namespace basic { &lease;
interface &interface; {
&I;
}
}
</A335-Xo_t-Build-iDNA-5i>
<A335-Xo_t-Build-iDNA-5>
namespace &namespace; {
public partial class  &signal;
	: &branch;.Auto, &interface;
	{
	static readonly char[]   lhs = &lhs; ;
	public override string   LHS { get { return new string(lhs) ; } }
	public override string[] RHS { get { return rhs ; } }
	static readonly string[] rhs = &rhs; ;
	public &signal;()
		{
		argv = new Tokenset.Token[ arg_i = &argc; ] ;
		}
	}
}
</A335-Xo_t-Build-iDNA-5>
<Automaton-deploy>
void shift()
	{
	_token = token ;
	token_HasValue = false ;
	}
int deploy( int i )
	{
	do	{
		if( i &gt; 0 )
			throw new System.NotImplementedException( "-range/+index condition" ) ;
		else
		if( i &lt; 0 )
			{
			(auto as &branch;.Auto).Argv = _token ;
			if( --backup > 0 )
				return (int)i ;
			//yy = xo_t[-i] ;
			(auto as &branch;.Auto).Splice() ;
			}
		else
			yy = (int)__default ;
		} while( (i = (int) gotoset_s( yy )) != __default ) ;
	if( token.c != 0 )
		throw new System.NotImplementedException( "token != $end" ) ;
	return 0 ;
	}
int split( int i )
	{
	if( i &gt; 0 )
		throw new System.NotImplementedException( "-range/+index condition" ) ;
	else
	if( i &lt; 0 )
		{
		(auto as &branch;.Auto).Argv = _token ;
		if( --backup > 0 )
			return (int)i ;
		(auto as &branch;.Auto).Splice() ;
		}
	if( token.c != 0 )
		throw new System.NotImplementedException( "token != $end" ) ;
	return 0 ;
	}
</Automaton-deploy>
<main_c>
#include &lt;stdlib.h>
#include &lt;sys/types.h>
#include &lt;sys/wait.h>
#include &lt;stdio.h>
#include &lt;unistd.h>
int debug = 0 ;
fasm(char *const argv[])
{
pid_t pid ;
int status ;
if( (pid = vfork()) == 0 )
	{
	if( debug )
		printf("%s\n",argv[0]) ;
	execve( argv[0] , argv, 0 ) ;
	abort() ;
	}
waitpid( pid, &amp;status, 0 ) ;
}
main(int argc, char** argv, char** envp)
{
if(argc>1) debug = 1 ;
&list;
}
</main_c>
<fasm_c>
fasm( (char*[]) &A;&argv; ) ;
</fasm_c>
<ProjectFile>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
  &lt;PropertyGroup&gt;
    &lt;Configuration Condition=" '$(Configuration)' == '' "&gt;Debug&lt;/Configuration&gt;
    &lt;Platform Condition=" '$(Platform)' == '' "&gt;x86&lt;/Platform&gt;
    &lt;ProductVersion&gt;9.0.21022&lt;/ProductVersion&gt;
    &lt;SchemaVersion&gt;2.0&lt;/SchemaVersion&gt;
    &lt;ProjectGuid&gt;{&guid;}&lt;/ProjectGuid&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;RootNamespace&gt;tmp&lt;/RootNamespace&gt;
    &lt;AssemblyName&gt;infrastructure&lt;/AssemblyName&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' "&gt;
    &lt;DebugType&gt;full&lt;/DebugType&gt;
    &lt;Optimize&gt;false&lt;/Optimize&gt;
    &lt;OutputPath&gt;bin\Debug&lt;/OutputPath&gt;
    &lt;DefineConstants&gt;EMBED&lt;/DefineConstants&gt;
    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
    &lt;PlatformTarget&gt;x86&lt;/PlatformTarget&gt;
    &lt;DebugSymbols&gt;true&lt;/DebugSymbols&gt;
    &lt;Commandlineparameters&gt;--shell="sh ../../~/compile.sh ../../~/hello.mono.world.il.text" --build=rebuild --lease="using System ;"&lt;/Commandlineparameters&gt;
    &lt;ConsolePause&gt;false&lt;/ConsolePause&gt;
    &lt;NoWarn&gt;169,219,414,649&lt;/NoWarn&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' "&gt;
    &lt;DebugType&gt;none&lt;/DebugType&gt;
    &lt;Optimize&gt;true&lt;/Optimize&gt;
    &lt;OutputPath&gt;bin\Release&lt;/OutputPath&gt;
    &lt;DefineConstants&gt;EMBED&lt;/DefineConstants&gt;
    &lt;ErrorReport&gt;prompt&lt;/ErrorReport&gt;
    &lt;WarningLevel&gt;4&lt;/WarningLevel&gt;
    &lt;PlatformTarget&gt;x86&lt;/PlatformTarget&gt;
    &lt;ConsolePause&gt;false&lt;/ConsolePause&gt;
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;Reference Include="System" /&gt;
    &lt;Reference Include="System.Xml" /&gt;
    &lt;Reference Include="System.Xml.Linq" /&gt;
    &lt;Reference Include="System.Drawing" /&gt;
    &lt;Reference Include="gtk-sharp, Version=2.12.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f"&gt;
      &lt;Private&gt;False&lt;/Private&gt;
      &lt;Package&gt;gtk-sharp-2.0&lt;/Package&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="glade-sharp, Version=2.12.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f"&gt;
      &lt;Private&gt;False&lt;/Private&gt;
      &lt;Package&gt;glade-sharp-2.0&lt;/Package&gt;
    &lt;/Reference&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;
&list;
  &lt;/ItemGroup&gt;
  &lt;Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /&gt;
&lt;/Project&gt;
</ProjectFile>
</auto>
