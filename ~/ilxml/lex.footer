
\"                 { length=0 ; text=malloc(length+1) ; BEGIN(qs) ; }
<qs>\\\"           { length+=2 ; text=realloc( text, length+1 ) ; text[length-2]='\\' ; text[length-1]='"' ; }
<qs>&              { ENTITY(5,"&amp;") ; }
<qs><              { ENTITY(4,"&lt;") ; }
<qs>>              { ENTITY(4,"&gt;") ; }
<qs>\\.            { length+=2 ; text=realloc( text, length+1 ) ; text[length-2]='\\' ; text[length-1]=yytext[1] ; }
<qs>[^\\\"\n&<>]+  { length+=yyleng ; text=realloc( text, length+1 ) ; strncpy(&text[length-yyleng],yytext,yyleng) ; }
<qs>\"             { BEGIN(0) ; text[length]='\0' ; return TERMINAL(QSTRING,text) ; }

\'                 { length=0 ; text=malloc(length+1) ; BEGIN(sq) ; }
<sq>\\\'           { length+=2 ; text=realloc( text, length+1 ) ; text[length-2]='\\' ; text[length-1]='"' ; }
<sq>&              { ENTITY(5,"&amp;") ; }
<sq><              { ENTITY(4,"&lt;") ; }
<sq>>              { ENTITY(4,"&gt;") ; }
<sq>\\.            { length+=2 ; text=realloc( text, length+1 ) ; text[length-2]='\\' ; text[length-1]=yytext[1] ; }
<sq>[^\\\'\n&<>]+  { length+=yyleng ; text=realloc( text, length+1 ) ; strncpy(&text[length-yyleng],yytext,yyleng) ; }
<sq>\'             { BEGIN(0) ; text[length]='\0' ; return TERMINAL(SQSTRING,text) ; }

"0x"{H}+           { text=malloc(yyleng+1) ; strncpy(text,yytext,yyleng) ; text[yyleng]='\0' ; return TERMINAL(INT64,text); }
<p>{H}{H}          { text=malloc(yyleng+1) ; strncpy(text,yytext,yyleng) ; text[yyleng]='\0' ; return TERMINAL(HEXBYTE,text); }
{D}+\.{D}+         { text=malloc(yyleng+1) ; strncpy(text,yytext,yyleng) ; text[yyleng]='\0' ; return TERMINAL(FLOAT64,text); }
{D}+               { text=malloc(yyleng+1) ; strncpy(text,yytext,yyleng) ; text[yyleng]='\0' ; return TERMINAL(INT64,text); }

{F}{C}*\.          {
                   if( ! dottedname ) { text=malloc(yyleng+1) ; strncpy(text,yytext,yyleng) ; text[yyleng]='\0' ; dottedname = 1 ; }
                   else { int l0 = strlen(text) ; text=realloc(text,l0+yyleng+1) ; strncpy(&text[l0],yytext,yyleng) ; text[l0+yyleng]='\0' ; }
                   }
{F}{C}*            {
                   if( ! dottedname ) { text=strndup(yytext,yyleng) ; text[yyleng]='\0' ; return TERMINAL(ID,text); }
                   else { int l0 = strlen(text) ; text=realloc(text,l0+yyleng+1) ; strncpy(&text[l0],yytext,yyleng) ; text[l0+yyleng]='\0' ; }
                   dottedname = 0 ;
                   return TERMINAL(DOTTEDNAME,text);
                   }

\(                 { if(!ps++) BEGIN(p) ; return PUNCTUATION(yytext[0]) ; }
\)                 { if(!--ps) BEGIN(0) ; return PUNCTUATION(yytext[0]) ; }

{P}                { return PUNCTUATION(yytext[0]) ; }
{WS}
%%

int TERMINAL_( int n, char *str )
	{
	#ifdef MMAP
		printf("&_%d_%d;%s",  n, strlen(str), str);
	#else
		printf("&_%d;%s", n, str);
	#endif
	return n ;
	}


int TERMINAL( int n, char *str )
	{
	#ifdef MMAP
		printf("&_%d_%d;%s",  n, strlen(str), str);
	#else
		printf("&_%d;%s", n, str);
	#endif
	free(str) ;
	return n ;
	}

int INSTRUCTION_( char *inst, int n, char *str )
	{
	int i;
	for( i = 0 ; i < ( sizeof( opcodes ) / sizeof( struct _opcodes ) ) ; i++ )
		{
		if( strcmp( opcodes[i].cn, str ) == 0 )
			{
			printf("<_%d/>%s", n, opcodes[i].sn ) ;
			/*
			printf("<i state=\"%d\" n=\"%d\" cn=\"%s\" sn=\"%s\" sb1=\"%s\" sb2=\"%s\" op=\"%s\" ok=\"%s\" h=\"%s\" bb=\"%s\" b=\"%s\" cf=\"%s\" />",
					(int)yylval_param,
				  	i, 
				 	opcodes[i].cn ,
					opcodes[i].sn ,
					opcodes[i].sb1 ,
					opcodes[i].sb2 ,
					opcodes[i].op ,
					opcodes[i].ok ,
					opcodes[i].h,
					opcodes[i].b1,
					opcodes[i].b2 ,
					opcodes[i].cf
					) ;
			*/
			return n ;
			}
		}
	return n ;
	}

int PUNCTUATION( int n )
	{
#ifndef MMAP
	if( n == (int) '&' )
		printf("<_%d/>&amp;", n);
	else
	if( n == (int) '>' )
		printf("<_%d/>&gt;", n);
	else
	if( n == (int) '<' )
		printf("<_%d/>&lt;", n);
	else
#endif
		printf("<_%d/>%c", n, n);
	return n ;
	}
