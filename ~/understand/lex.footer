
\".+\" { text=strndup(yytext+1,yyleng-2) ; return TERMINAL(QSTRING,text, yylval_param ); }
\'.+\' { text=strndup(yytext+1,yyleng-2) ; return TERMINAL(SQSTRING,text, yylval_param ); }

"0x"{H}+     { text=strndup(yytext,yyleng) ; return TERMINAL(INT64,text, yylval_param ); }
{H}{H}       { text=strndup(yytext,yyleng) ; return TERMINAL(HEXBYTE,text,yylval_param ); }
{D}+\.{D}+   { text=strndup(yytext,yyleng) ; return TERMINAL(FLOAT64,text, yylval_param ); }
{D}+         { text=strndup(yytext,yyleng) ; return TERMINAL(INT64,text, yylval_param ); }
{F}{C}*\.	 { buf=alloca(yyleng+1) ; strncpy(buf,yytext,yyleng) ; dottedname = 1 ; }
{F}{C}*		 { if( ! dottedname )
				{ text=strndup(yytext,yyleng) ; return TERMINAL(ID,text, yylval_param ); }
				else {
					 dottedname = 0 ;
					 int l = strlen(buf)+yyleng ;
					 text=malloc(l+1) ;
					 text=strcpy(text,buf) ;
					 strncat(text,yytext,yyleng) ;
					 return TERMINAL(DOTTEDNAME,text, yylval_param );
					 }
			 }

{P}          { return PUNCTUATION(yytext[0], yylval_param) ; }
{WS}
%%

int TERMINAL_( int n, char *str, YYSTYPE * yylval_param )
	{
	//if( str[0] != '.' )
		return TERMINAL( n, str, yylval_param ) ;
	//printf("<%s state=\"%d\"/>", &str[1], (int)yylval_param);
	//return n ;
	}


int TERMINAL( int n, char *str, YYSTYPE* yylval_param )
	{
			printf("&_%d_%d;%s", (int)yylval_param, n, str);
		/*
	switch( n )
		{
		case ID:
			printf("<ID-%d/>%s", (long)yylval_param, str);
			break ;
		case INT64:
			printf("<INT64-%d/>%s", (long)yylval_param, str);
			break ;
		case HEXBYTE:
			printf("<HEXBYTE-%d/>%s", (long)yylval_param, str);
			break ;
		case FLOAT64:
			printf("<FLOAT64-%d/>%s", (long)yylval_param, str);
			break ;
		case QSTRING:
			printf("<QSTRING-%d/>%s", (long)yylval_param, str);
			break ;
		case SQSTRING:
			printf("<SQSTRING-%d/>%s", (long)yylval_param, str);
			break ;
		case DOTTEDNAME:
			printf("<DOTTEDNAME-%d/>%s", (long)yylval_param, str);
			break ;
		default:
			printf("<_%d-%d/>%s", n, (int)yylval_param, str);
			break ;
		}
	*/
	return n ;
	}

int INSTRUCTION_( char *inst, int n, char *str, YYSTYPE* yylval_param )
	{
	int i;
	for( i = 0 ; i < ( sizeof( opcodes ) / sizeof( struct _opcodes ) ) ; i++ )
		{
		if( strcmp( opcodes[i].cn, str ) == 0 )
			{
			//printf("<%s-%d/>%s", inst, (long)yylval_param, opcodes[i].sn ) ;
			printf("<_%d-%d/>%s", n, (long)yylval_param, opcodes[i].sn ) ;
			/*
			printf("<i state=\"%d\" n=\"%d\" cn=\"%s\" sn=\"%s\" sb1=\"%s\" sb2=\"%s\" op=\"%s\" ok=\"%s\" h=\"%s\" bb=\"%s\" b=\"%s\" cf=\"%s\" />",
					(int)yylval_param,
				  	i, 
				 	opcodes[i].cn ,
					opcodes[i].sn ,
					opcodes[i].sb1 ,
					opcodes[i].sb2 ,
					opcodes[i].op ,
					opcodes[i].ok ,
					opcodes[i].h,
					opcodes[i].b1,
					opcodes[i].b2 ,
					opcodes[i].cf
					) ;
			*/
			return n ;
			}
		}
	return n ;
	}

int PUNCTUATION( int n, YYSTYPE* yylval_param )
	{
  	printf("<_%d-%d/>%c", n, (int)yylval_param, n);
	return n ;
	}
int PUNCTUATION2( int n, int m )
	{
  	//printf("<p>%c%c</p>", n, m);
	return n ;
	}
